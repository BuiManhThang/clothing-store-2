import { {{EntityName}} } from '../../../domain/entities/{{EntityName}}'
import { {{EntityName}}DtoCreate, {{EntityName}}DtoView } from '../../dtos/{{EntityName}}Dto'
import { I{{EntityName}}Repo } from '../../../domain/interfaces/repositories/I{{EntityName}}Repo'
import { {{EntityName}}Mapper } from '../../mappers/{{EntityName}}Mapper'
import { generateUUID } from '../../../shared/utils/commonUtil'
import { IUserContextService } from '../../interfaces/IUserContextService'

export class Create{{EntityName}}UseCase {
  readonly #{{entityName}}Repo: I{{EntityName}}Repo

  constructor({{entityName}}Repo: I{{EntityName}}Repo) {
    this.#{{entityName}}Repo = {{entityName}}Repo
  }

  async execute(userContextService: IUserContextService | undefined, create{{EntityName}}Dto: {{EntityName}}DtoCreate): Promise<{{EntityName}}DtoView> {
    const {{entityName}}: {{EntityName}} = {
      id: generateUUID(),
    {{#each createColumns}}
      {{column_name}}: create{{EntityName}}Dto.{{column_name}},
    {{/each}}
      createdAt: new Date(),
      createdBy: userContextService?.getCurrentUserId() || '',
    }

    const new{{EntityName}} = await this.#{{entityName}}Repo.create({{entityName}})

    return {{EntityName}}Mapper.to{{EntityName}}DtoView(new{{EntityName}})
  }
}
