import { Request, Response, NextFunction } from 'express'
import { Create{{EntityName}}UseCase } from '../../application/use-cases/{{entityName}}/Create{{EntityName}}UseCase'
import { Delete{{EntityName}}UseCase } from '../../application/use-cases/{{entityName}}/Delete{{EntityName}}UseCase'
import { FindAll{{EntityNames}}UseCase } from '../../application/use-cases/{{entityName}}/FindAll{{EntityNames}}UseCase'
import { Get{{EntityName}}PaginationUseCase } from '../../application/use-cases/{{entityName}}/Get{{EntityName}}PaginationUseCase'
import { Find{{EntityName}}ByIdUseCase } from '../../application/use-cases/{{entityName}}/Find{{EntityName}}ByIdUseCase'
import { Update{{EntityName}}UseCase } from '../../application/use-cases/{{entityName}}/Update{{EntityName}}UseCase'
import { {{EntityName}}DtoCreate, {{EntityName}}DtoUpdate } from '../../application/dtos/{{EntityName}}Dto'
import { BaseController } from './BaseController'
import { HTTP_STATUS } from '../../shared/constants/httpStatus'

export class {{EntityName}}Controller extends BaseController {
  readonly #create{{EntityName}}UseCase: Create{{EntityName}}UseCase
  readonly #update{{EntityName}}UseCase: Update{{EntityName}}UseCase
  readonly #find{{EntityName}}ByIdUseCase: Find{{EntityName}}ByIdUseCase
  readonly #findAll{{EntityNames}}UseCase: FindAll{{EntityNames}}UseCase
  readonly #getPagination{{EntityName}}UseCase: Get{{EntityName}}PaginationUseCase
  readonly #delete{{EntityName}}UseCase: Delete{{EntityName}}UseCase

  constructor(
    create{{EntityName}}UseCase: Create{{EntityName}}UseCase,
    update{{EntityName}}UseCase: Update{{EntityName}}UseCase,
    find{{EntityName}}ByIdUseCase: Find{{EntityName}}ByIdUseCase,
    findAll{{EntityNames}}UseCase: FindAll{{EntityNames}}UseCase,
    getPagination{{EntityName}}UseCase: Get{{EntityName}}PaginationUseCase,
    delete{{EntityName}}UseCase: Delete{{EntityName}}UseCase
  ) {
    super()
    this.#create{{EntityName}}UseCase = create{{EntityName}}UseCase
    this.#update{{EntityName}}UseCase = update{{EntityName}}UseCase
    this.#find{{EntityName}}ByIdUseCase = find{{EntityName}}ByIdUseCase
    this.#findAll{{EntityNames}}UseCase = findAll{{EntityNames}}UseCase
    this.#getPagination{{EntityName}}UseCase = getPagination{{EntityName}}UseCase
    this.#delete{{EntityName}}UseCase = delete{{EntityName}}UseCase
  }

  async create(req: Request, res: Response, next: NextFunction) {
    const create{{EntityName}}Dto: {{EntityName}}DtoCreate = req.body

    try {
      const created{{EntityName}} = await this.#create{{EntityName}}UseCase.execute(req.userContextService, create{{EntityName}}Dto)
      return res.status(HTTP_STATUS.CREATED).json(created{{EntityName}})
    } catch (error) {
      next(error)
    }
  }

  async update(req: Request, res: Response, next: NextFunction) {
    const {{entityName}}Id = req.params.id
    const update{{EntityName}}Dto: {{EntityName}}DtoUpdate = req.body

    try {
      const updated{{EntityName}} = await this.#update{{EntityName}}UseCase.execute(req.userContextService, {{entityName}}Id, update{{EntityName}}Dto)
      return res.status(HTTP_STATUS.OK).json(updated{{EntityName}})
    } catch (error) {
      next(error)
    }
  }

  async findById(req: Request, res: Response, next: NextFunction) {
    const {{entityName}}Id = req.params.id

    try {
      const {{entityName}} = await this.#find{{EntityName}}ByIdUseCase.execute({{entityName}}Id)
      if (!{{entityName}}) {
        return res.sendStatus(HTTP_STATUS.NOT_FOUND)
      }

      return res.status(HTTP_STATUS.OK).json({{entityName}})
    } catch (error) {
      next(error)
    }
  }

  async findAll(_req: Request, res: Response, next: NextFunction) {
    try {
      const {{entityNames}} = await this.#findAll{{EntityNames}}UseCase.execute()

      return res.status(HTTP_STATUS.OK).json({{entityNames}})
    } catch (error) {
      next(error)
    }
  }

  async getPagination(req: Request, res: Response, next: NextFunction) {
    try {
      const pageSize = req.query.pageSize ? parseInt(req.query.pageSize.toString()) : undefined
      const pageIndex = req.query.pageIndex ? parseInt(req.query.pageIndex.toString()) : undefined
      const paginationResult = await this.#getPagination{{EntityName}}UseCase.execute(
        pageSize,
        pageIndex,
        req.query.sort?.toString(),
        req.query.sortDirection?.toString(),
      )

      return res.status(HTTP_STATUS.OK).json(paginationResult)
    } catch (error) {
      next(error)
    }
  }

  async delete(req: Request, res: Response, next: NextFunction) {
    const {{entityName}}Id = req.params.id

    try {
      await this.#delete{{EntityName}}UseCase.execute({{entityName}}Id)

      return res.sendStatus(HTTP_STATUS.NO_CONTENT)
    } catch (error) {
      next(error)
    }
  }
}
